'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _radium = require('radium');var _radium2 = _interopRequireDefault(_radium);
var _FileDrop = require('../components/FileDrop');var _FileDrop2 = _interopRequireDefault(_FileDrop);
var _InputTag = require('../components/InputTag');var _InputTag2 = _interopRequireDefault(_InputTag);
var _RaisedButton = require('material-ui/RaisedButton');var _RaisedButton2 = _interopRequireDefault(_RaisedButton);
var _LinearProgress = require('material-ui/LinearProgress');var _LinearProgress2 = _interopRequireDefault(_LinearProgress);
var _Snackbar = require('material-ui/Snackbar');var _Snackbar2 = _interopRequireDefault(_Snackbar);
var _propTypes = require('prop-types');var _propTypes2 = _interopRequireDefault(_propTypes);
var _reactRedux = require('react-redux');
var _actions = require('../actions');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

DropZone = function (_React$Component) {_inherits(DropZone, _React$Component);

    function DropZone(props) {_classCallCheck(this, DropZone);var _this = _possibleConstructorReturn(this, (DropZone.__proto__ || Object.getPrototypeOf(DropZone)).call(this,
        props));
        _this.state = _this.getInitialState();

        _this.onDrop = _this.onDrop.bind(_this);
        _this.addTag = _this.addTag.bind(_this);
        _this.deleteTag = _this.deleteTag.bind(_this);
        _this.changeTag = _this.changeTag.bind(_this);
        _this.uploadFiles = _this.uploadFiles.bind(_this);
        _this.componentWillUpdate = _this.componentWillUpdate.bind(_this);return _this;
    }_createClass(DropZone, [{ key: 'getInitialState', value: function getInitialState()

        {
            return {
                tag: "",
                tags: [],
                files: [] };

        } }, { key: 'render', value: function render()

        {
            return (
                _react2.default.createElement('div', null,
                    _react2.default.createElement(_Snackbar2.default, {
                        open: this.props.error,
                        message: this.props.errorMessage,
                        autoHideDuration: 3000,
                        bodyStyle: { backgroundColor: '#D32F2F' },
                        title: 'Error' }),

                    _react2.default.createElement(_FileDrop2.default, {
                        dropFiles: this.onDrop,
                        files: this.state.files }),

                    _react2.default.createElement(_InputTag2.default, {
                        addTag: this.addTag,
                        deleteTag: this.deleteTag,
                        changeTag: this.changeTag,
                        tags: this.state.tags,
                        tag: this.state.tag }),

                    this.props.uploading &&
                    _react2.default.createElement(_LinearProgress2.default, { mode: 'indeterminate', value: this.props.completed }),

                    _react2.default.createElement(_RaisedButton2.default, {
                        label: 'Upload',
                        primary: true,
                        style: styles.button,
                        onClick: this.uploadFiles,
                        disabled: this.props.uploading })));



        } }, { key: 'onDrop', value: function onDrop(

        files) {
            var cFiles = this.state.files;
            for (var i = 0; i < files.length; i++) {
                cFiles.push(files[i]);
            }
            this.setState({ files: cFiles });
            this.props.dropFiles(files);
        } }, { key: 'addTag', value: function addTag(

        tag) {
            var tags = this.state.tags;
            tags.push(tag);
            this.setState({ tags: tags });
        } }, { key: 'deleteTag', value: function deleteTag(

        key) {
            var tags = this.state.tags;
            var tagToDelete = tags.map(function (tag) {return tag.key;}).indexOf(key);
            console.log(key, tagToDelete);
            if (0 <= tagToDelete) {
                tags.splice(tagToDelete, 1);
                this.setState({ tags: tags });
            }
        } }, { key: 'changeTag', value: function changeTag(

        value) {
            this.setState({ tag: value });
        } }, { key: 'uploadFiles', value: function uploadFiles()

        {
            this.props.storeDocuments(this.state.files, this.state.tags);
        } }, { key: 'componentWillUpdate', value: function componentWillUpdate(

        nextProps, nextState) {
            if (nextProps.uploading === false && nextProps.error === false && this.props.uploading === true) {
                this.setState(this.getInitialState());
            }
        } }]);return DropZone;}(_react2.default.Component);


DropZone.propTypes = {
    storeDocuments: _propTypes2.default.func.isRequired };


var styles = {
    button: {
        marginTop: 12 },

    card: {
        color: "red" } };



DropZone = (0, _radium2.default)(DropZone);

var mapStateToProps = function mapStateToProps(state) {
    return {
        uploading: state.uploading,
        error: state.upload_error.error,
        errorMessage: state.upload_error.errorMessage };

};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        storeDocuments: function storeDocuments(files, tags) {
            dispatch((0, _actions.storeDocuments)(files, tags));
        },
        dropFiles: function dropFiles(files) {
            for (var i = 0; i < files.length; i++) {
                dispatch((0, _actions.fileDropped)(files[i]));
            }
        } };

};

DropZone = (0, _reactRedux.connect)(
mapStateToProps,
mapDispatchToProps)(
DropZone);exports.default =

DropZone;