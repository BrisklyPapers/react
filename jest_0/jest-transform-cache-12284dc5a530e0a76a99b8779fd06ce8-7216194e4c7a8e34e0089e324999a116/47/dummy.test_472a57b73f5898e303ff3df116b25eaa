'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _enzyme = require('enzyme');
var _propTypes = require('prop-types');var _propTypes2 = _interopRequireDefault(_propTypes);
var _reactRedux = require('react-redux');
var _reduxMockStore = require('redux-mock-store');var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var mockStore = (0, _reduxMockStore2.default)();var

MyComponent = function (_React$Component) {_inherits(MyComponent, _React$Component);
    function MyComponent(props) {_classCallCheck(this, MyComponent);var _this = _possibleConstructorReturn(this, (MyComponent.__proto__ || Object.getPrototypeOf(MyComponent)).call(this,
        props));
        _this.state = _this.getInitialState();
        _this.onDrop = _this.onDrop.bind(_this);return _this;
    }_createClass(MyComponent, [{ key: 'getInitialState', value: function getInitialState()

        {
            return {
                files: [] };

        } }, { key: 'onDrop', value: function onDrop(

        files) {
            this.setState({ files: files });
        } }, { key: 'render', value: function render()

        {
            return null;
        } }]);return MyComponent;}(_react2.default.Component);


MyComponent.propTypes = {};

var mapStateToProps = function mapStateToProps(state) {
    return {};
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {};
};

MyComponent = (0, _reactRedux.connect)(
mapStateToProps,
mapDispatchToProps)(
MyComponent);

describe('containers/DropZone', function () {
    var wrapper = void 0,store = void 0;

    beforeEach(function () {
        store = mockStore({ uploading: false, upload_error: { error: false, errorMessage: "" } });
        store.dispatch = spy();
    });

    it('onDrop', function () {
        var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(MyComponent, { store: store }));
        expect(wrapper.state().files).toEqual(undefined);
        expect(wrapper.instance().onDrop([{ a: 'a' }])).toEqual(undefined);
        expect(wrapper.state().files).toEqual([{ a: 'a' }]);
    });
});