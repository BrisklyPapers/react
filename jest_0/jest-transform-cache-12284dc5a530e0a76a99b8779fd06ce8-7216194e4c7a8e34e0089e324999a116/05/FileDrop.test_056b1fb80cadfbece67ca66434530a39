'use strict';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _FileDrop = require('../../src/components/FileDrop.js');var _FileDrop2 = _interopRequireDefault(_FileDrop);
var _reactTestRenderer = require('react-test-renderer');var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('components/FileDrop', function () {
    it('should render correctly', function () {
        var fileDrop = _reactTestRenderer2.default.create(
        _react2.default.createElement(_FileDrop2.default, { dropFiles: function dropFiles() {}, files: [] }));

        expect(fileDrop.toJSON()).toMatchSnapshot();
    });

    it('should change style onDragOver and onDragEnd', function () {
        var event = {
            preventDefault: function preventDefault() {
            } };


        var fileDrop = _reactTestRenderer2.default.create(
        _react2.default.createElement(_FileDrop2.default, { dropFiles: function dropFiles() {}, files: [] }));

        var tree = fileDrop.toJSON();
        expect(tree).toMatchSnapshot();

        tree.children[0].props.onDragOver(event);
        tree = fileDrop.toJSON();
        expect(tree).toMatchSnapshot();

        tree.children[0].props.onDragEnd(event);
        tree = fileDrop.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('should change style onDragOver and onDragLeave', function () {
        var event = {
            preventDefault: function preventDefault() {
            } };


        var fileDrop = _reactTestRenderer2.default.create(
        _react2.default.createElement(_FileDrop2.default, { dropFiles: function dropFiles() {}, files: [] }));

        var tree = fileDrop.toJSON();
        expect(tree).toMatchSnapshot();

        tree.children[0].props.onDragOver(event);
        tree = fileDrop.toJSON();
        expect(tree).toMatchSnapshot();

        tree.children[0].props.onDragLeave(event);
        tree = fileDrop.toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('should add and return dropped files', function () {
        var event = {
            preventDefault: function preventDefault() {
            },
            dataTransfer: {
                files: [
                { name: 'file1' },
                { name: 'file2' }] } };




        var files = [];
        var dropFiles = function dropFiles(droppedFiles) {
            files = droppedFiles;
        };

        var fileDrop = _reactTestRenderer2.default.create(
        _react2.default.createElement(_FileDrop2.default, { dropFiles: dropFiles, files: files }));


        tree.children[0].props.onDrop(event);
        tree = fileDrop.toJSON();
        expect(tree).toMatchSnapshot();

        expect(files).toEqual([{ file1: file1 }, { file2: file2 }]);
    });
});