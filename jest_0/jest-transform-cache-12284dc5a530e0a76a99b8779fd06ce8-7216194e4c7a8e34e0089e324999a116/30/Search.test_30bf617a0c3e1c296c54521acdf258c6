'use strict';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _Search = require('../../src/containers/Search');var _Search2 = _interopRequireDefault(_Search);
var _enzyme = require('enzyme');
var _reduxMockStore = require('redux-mock-store');var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);
var _reduxThunk = require('redux-thunk');var _reduxThunk2 = _interopRequireDefault(_reduxThunk);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var mockStore = (0, _reduxMockStore2.default)([_reduxThunk2.default]);

describe('containers/Search', function () {
    var wrapper = void 0,store = void 0;

    beforeEach(function () {
        store = mockStore({ searchedText: "fun" });
        //store.dispatch = jest.fn();
        wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Search2.default, { store: store }));
    });

    it('maps state and dispatch to props', function () {
        expect(wrapper.props()).toEqual(expect.objectContaining({
            searchedText: "fun",
            triggerSearch: expect.any(Function),
            onFocus: expect.any(Function) }));

    });

    it('maps triggerSearch to dispatch search action', function () {
        var event = { target: { value: "test" } };
        wrapper.props().triggerSearch(event);

        var expectedActions = store.getActions();

        expect(expectedActions.length).toBe(2);

        expect(store.dispatch).toHaveBeenCalledTimes(2);
        expect(store.dispatch).toHaveBeenCalledWith({ text: "test", type: 'SEARCH_INPUT_KEY_PRESSED' });
        expect(store.dispatch).toHaveBeenLastCalledWith({ text: "test", type: 'SEARCH_DOCUMENTS' });
    });

});