'use strict';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _reactDom = require('react-dom');var _reactDom2 = _interopRequireDefault(_reactDom);
var _testUtils = require('react-dom/test-utils');var _testUtils2 = _interopRequireDefault(_testUtils);
var _reactTapEventPlugin = require('react-tap-event-plugin');var _reactTapEventPlugin2 = _interopRequireDefault(_reactTapEventPlugin);

var _InputTag = require('../../src/components/InputTag.js');var _InputTag2 = _interopRequireDefault(_InputTag);
var _reactTestRenderer = require('react-test-renderer');var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);
var _enzyme = require('enzyme');
var _sinon = require('sinon');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}(0, _reactTapEventPlugin2.default)();

describe('components/InputTag', function () {
    it('should render correctly', function () {
        var inputTag = _reactTestRenderer2.default.create(
        _react2.default.createElement(_InputTag2.default, {
            addTag: function addTag() {},
            deleteTag: function deleteTag() {},
            changeTag: function changeTag() {},
            tags: [],
            tag: '' }));


        expect(inputTag.toJSON()).toMatchSnapshot();
    });

    it('should display chips for given tags', function () {
        var wrapper = (0, _enzyme.shallow)(
        _react2.default.createElement(_InputTag2.default, {
            addTag: function addTag() {},
            deleteTag: function deleteTag() {},
            changeTag: function changeTag() {},
            tags: [{ key: "t1", label: "test" }, { key: "t2", label: "react" }],
            tag: '' }));


        expect(wrapper.find('Chip')).toHaveLength(2);
        expect(wrapper.find('Chip').first().prop("children")).toEqual("test");
    });

    it('should call deleteTag method when Chip is deleted', function (done) {
        var deleteTagSpy = (0, _sinon.spy)();
        var wrapper = (0, _enzyme.mount)(
        _react2.default.createElement(_InputTag2.default, {
            addTag: function addTag() {},
            deleteTag: deleteTagSpy,
            changeTag: function changeTag() {},
            tags: [{ key: "t1", label: "test" }],
            tag: '' }));


        expect(wrapper.find('Chip')).toHaveLength(1);

        // enzyme does not support touchTap currently
        // @see https://github.com/airbnb/enzyme/issues/99
        var node = _reactDom2.default.findDOMNode(
        _testUtils2.default.findRenderedDOMComponentWithTag(
        wrapper.instance(), 'svg'));


        _testUtils2.default.Simulate.touchTap(node);

        expect.assertions(2);
        setTimeout(function () {
            expect(deleteTagSpy.callCount).toEqual(1);
            done();
        }, 0);
    });

    it('should return input value on input change', function (done) {
        var changeTagSpy = (0, _sinon.spy)();
        var addTagSpy = (0, _sinon.spy)();
        var wrapper = (0, _enzyme.mount)(
        _react2.default.createElement(_InputTag2.default, {
            addTag: addTagSpy,
            deleteTag: function deleteTag() {},
            changeTag: changeTagSpy,
            tags: [],
            tag: '' }));


        expect(wrapper.find('TextField')).toHaveLength(1);
        wrapper.find('TextField').first().find('input').simulate('change', { key: 'f', target: { value: 'f' } });

        expect.assertions(3);
        setTimeout(function () {
            expect(changeTagSpy.callCount).toEqual(1);
            expect(changeTagSpy.calledWithMatch("f")).toEqual(true);
            done();
        }, 0);
    });

    it('should return clear input and create Chip if Return is pressed', function (done) {
        var changeTagSpy = (0, _sinon.spy)();
        var wrapper = (0, _enzyme.mount)(
        _react2.default.createElement(_InputTag2.default, {
            addTag: function addTag() {},
            deleteTag: function deleteTag() {},
            changeTag: changeTagSpy,
            tags: [],
            tag: '' }));


        expect(wrapper.find('TextField')).toHaveLength(1);
        expect(wrapper.find('Chip')).toHaveLength(0);
        wrapper.find('TextField').first().find('input').simulate('keyPress', { key: 'Enter', target: { value: 'f' } });

        expect.assertions(5);
        setTimeout(function () {
            expect(changeTagSpy.callCount).toEqual(1);
            expect(changeTagSpy.calledWithMatch("")).toEqual(true);
            expect(wrapper.find('Chip')).toHaveLength(1);
            done();
        }, 0);
    });
});