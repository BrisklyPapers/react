'use strict';var _search = require('../../src/actions/search.js');





var _reduxMockStore = require('redux-mock-store');var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);
var _reduxThunk = require('redux-thunk');var _reduxThunk2 = _interopRequireDefault(_reduxThunk);
var _fetchMock = require('fetch-mock');var _fetchMock2 = _interopRequireDefault(_fetchMock);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var middlewares = [_reduxThunk2.default];
var mockStore = (0, _reduxMockStore2.default)(middlewares);

describe('actions/fileDropped', function () {
    it('returns dropped document', function () {
        expect(
        (0, _search.fileDropped)({ body: "test" })).
        toEqual({
            type: _search.FILE_DROP,
            text: { body: "test" } });

    });
});

describe('actions/fileStartUpload', function () {
    it('returns FILE_START_UPLOAD', function () {
        expect(
        (0, _search.fileStartUpload)("test")).
        toEqual({
            type: _search.FILE_START_UPLOAD });

    });
});

describe('actions/storeDocuments', function () {
    var store = void 0,myMock = void 0;

    beforeEach(function () {
        store = mockStore({});
    });

    afterEach(function () {
        myMock.restore();
    });

    it('returns date and a valid response', function () {
        var mockResult = [
        { fileName: "foo.pdf", url: "http://", text: "foo", tags: [] }];

        myMock = _fetchMock2.default.mock('/ajax/document/search?q=foo', mockResult);

        return store.dispatch(fetchDocumentsIfNeeded("foo")).
        then(function () {
            expect(myMock.called('/ajax/document/search?q=foo')).toBe(true);

            var expectedActions = store.getActions();
            expect(expectedActions.length).toBe(2);
            expect(expectedActions).toContainEqual({
                type: SEARCH_DOCUMENTS,
                text: "foo" });

            expect(expectedActions).toContainEqual({
                type: RECEIVE_DOCUMENTS,
                documents: mockResult,
                receivedAt: Date.now() });

        });
    });

    it('returns an invlaid response', function () {
        var mockResult = [
        { fileName: "foo.pdf", url: "http://", text: "foo", tags: [] }];

        myMock = _fetchMock2.default.mock('/ajax/document/search?q=foo', 401);

        return store.dispatch(fetchDocumentsIfNeeded("foo")).
        then(function () {
            expect(myMock.called('/ajax/document/search?q=foo')).toBe(true);

            var expectedActions = store.getActions();
            expect(expectedActions.length).toBe(2);
            expect(expectedActions).toContainEqual({
                type: SEARCH_DOCUMENTS,
                text: "foo" });

            expect(expectedActions).toContainEqual({
                type: RECEIVE_DOCUMENTS_ERROR,
                documents: [],
                receivedAt: Date.now() });

        });
    });
});